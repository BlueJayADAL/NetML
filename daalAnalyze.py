import sys
import os
import argparse
import time
import threading

def main():
	print("Time started...")
	startTime = time.time()
	parser = argparse.ArgumentParser(description="Run Joy to recursively convert the raw PCAP files into processed zipped files", add_help=True)
	parser.add_argument('-i', '--input', action="store", help="The input folder containing raw PCAP files")
	parser.add_argument('-o', '--output', action="store", help="The output folder containing files generated by Joy")
	args = parser.parse_args()
	
	#setup input folder and output folders
	if args.input == None or not os.path.isdir(args.input) or args.output == None or not os.path.isdir(args.output):
		print("No valid input or output folder!")
		return
	else:
		pcapFolder = args.input
		if not pcapFolder.endswith('/'):
			pcapFolder += '/'

		joyFolder = args.output
		if not joyFolder.endswith('/'):
			joyFolder += '/'
		dataFolder = "%sdata/" % (joyFolder)
		if not os.path.exists(dataFolder):
			os.mkdir(dataFolder)

	print("Processing data using joy.....")
	for dirpath, dirnames, filenames in os.walk(pcapFolder): #opt?
		if not dirnames:
			if not dirpath.endswith('/'):
				dirpath += '/'
			dirNames = dirpath.split('/')
			outName =  "%s_%s" % (dirNames[-3], dirNames[-2]) 
			fileCount = len(filenames)
			bound = 1
			count = (fileCount+(bound-1))/bound
			idx = 0
			while idx < count:
				fileToBeProcessedString = ' '.join(["%s%s" % (dirpath,x) for x in filenames[idx*bound: min((idx+1)*bound, fileCount)]])
				command = "joy bidir=1 dns=1 tls=1 http=1 dist=1 %s > %s%s_%s.gz" % (fileToBeProcessedString, dataFolder, outName, str(idx))
				#print(command) #verbose
				os.system(command)
				idx += 1
	# Multithread using 4 threads to accelerate creation of corresponding JSON files
	# create threads	
	meta = threading.Thread(target=analyzeMETA, args=(joyFolder, dataFolder))
	http = threading.Thread(target=analyzeHTTP, args=(joyFolder, dataFolder))
	tls = threading.Thread(target=analyzeTLS, args=(joyFolder, dataFolder))
	dns = threading.Thread(target=analyzeDNS, args=(joyFolder, dataFolder))
	# start threads
	print("Starting threads...")
	meta.start()
	tls.start()
	http.start()
	dns.start()
	# wait for all threads to complete
	dns.join()
	http.join()
	tls.join()
	meta.join()
	print("All threads complete!")

	endTime = time.time()
	print("Analyze elapsed in %s seconds" %(str(endTime - startTime)))



def analyzeMETA(joyFolder, dataFolder):
	print("Analyzing Metadata.....")
	command4 = "python %sdaalAnalyzeMETA.py -i %s -j" % (joyFolder, dataFolder)
	#print(command4) #verbose
	os.system(command4)
	print("Done analyzing Metadata!")

def analyzeHTTP(joyFolder, dataFolder):
	print("Analyzing HTTP.....")
	command3 = "python %sdaalAnalyzeHTTPWithTime.py -i %s -j" % (joyFolder, dataFolder)
	#print(command3) #verbose
	os.system(command3)
	print("Done analyzing HTTP!")

def analyzeTLS(joyFolder, dataFolder):
	print("Analyzing TLS.....")
	command2 = "python %sdaalAnalyzeTLS.py -i %s -j" % (joyFolder, dataFolder)
	#print(command2) #verbose
	os.system(command2)
	print("Done analyzing TLS!")

def analyzeDNS(joyFolder, dataFolder):
	print("Analyzing DNS.....")
	command1 = "python %sdaalAnalyzeDNS.py -i %s -j" % (joyFolder, dataFolder)
	#print(command1) #verbose
	os.system(command1)
	print("Done analyzing DNS!")

if __name__ == "__main__":
	main()
